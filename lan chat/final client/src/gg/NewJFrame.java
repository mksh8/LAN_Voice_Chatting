package gg;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author kamal
 */
import java.io.*;
import java.net.*;
import javax.sound.midi.Receiver;
import javax.sound.sampled.*;
import java.awt.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.*;
import static javafx.scene.input.KeyCode.K;
import javax.imageio.ImageIO;
import javax.sound.sampled.DataLine.Info;
import javax.swing.event.*;



public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    ByteArrayOutputStream byteArrayOutputStream;
   AudioFormat audioFormat;			//the class which specify the particular arrangemnt of data
    TargetDataLine targetDataLine;		//type of data line from which data can be read
    AudioInputStream audioInputStream;		//input stream with a specified audio format and length
    BufferedOutputStream out = null;			
    BufferedInputStream in = null;
    Socket sock = null;				//it is the end point b/w 2 machine for comm.
    SourceDataLine sourceDataLine;		//type of data line where data can be written
    boolean stopCapture = false;
    
    
   // ServerSocket MyService;
    //Socket clientSocket = null;
    BufferedInputStream input;
     public NewJFrame() {super("Conference_client");
        initComponents();
        setSize(1500,1000);
        this.setResizable(false);
        this.jLabel3.setSize(1500, 1000);
        this.setIconImage(new ImageIcon("connect.png").getImage());
        //this.jLabel3.setIcon((Icon) new ImageIcon("kk.jpg").getImage());
        this.jLabel3.setIcon(new ImageIcon("kk.jpg"));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAutoRequestFocus(false);
        setBackground(new java.awt.Color(240, 40, 240));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusCycleRoot(false);
        setForeground(java.awt.Color.black);
        setLocation(new java.awt.Point(0, 0));
        getContentPane().setLayout(null);

        jLabel1.setText("Enter the Server IP");
        jLabel1.setName("lb1"); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(59, 61, 140, 14);

        jTextField1.setText("localhost");
        jTextField1.setName("tf1"); // NOI18N
        getContentPane().add(jTextField1);
        jTextField1.setBounds(317, 52, 121, 33);

        jLabel2.setText("You are Connected to");
        jLabel2.setName("lb2"); // NOI18N
        getContentPane().add(jLabel2);
        jLabel2.setBounds(59, 135, 130, 14);

        jTextField2.setName("tf2"); // NOI18N
        getContentPane().add(jTextField2);
        jTextField2.setBounds(317, 125, 121, 34);

        jButton1.setText("Connect");
        jButton1.setName("jb1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(117, 211, 110, 23);

        jButton2.setText("Disconnect");
        jButton2.setName("jb2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(317, 211, 130, 23);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(67, 293, 596, 135);
        getContentPane().add(jLabel3);
        jLabel3.setBounds(0, 0, 1310, 670);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       
        
            try{
            //JMessageBox j;
           //ta.append("Connecting........\n ");
	sock = new Socket(jTextField1.getText(), 1987);
                   jTextField2.setText(sock.getInetAddress().getHostName());
         jTextArea1.append("Connecting........\n Connected to "+sock.getInetAddress().getHostName());
            in = new BufferedInputStream(sock.getInputStream());
          // String text = IOUtils.toString(sock.getInputStream());

            out = new BufferedOutputStream(sock.getOutputStream());
            
            Mixer.Info[] mixerInfo = AudioSystem.getMixerInfo();
            //The Mixer.Info class represents information about an audio mixer, 
            //including the product's name, version, and vendor, along with a textual description;
            
            audioFormat = getAudioFormat();
            DataLine.Info dataLineInfo = new DataLine.Info(TargetDataLine.class, audioFormat);
            // DataLine.Info provides additional information specific to data lines. 
            //This information includes:
           //   the audio formats supported by the data line
           //     the minimum and maximum sizes of its internal buffer
            Mixer mixer = AudioSystem.getMixer(mixerInfo[3]);
            //A mixer is an audio device with one or more lines.
            // A mixer that actually mixes audio has multiple input (source) lines and at least one output (target) line.
            targetDataLine = (TargetDataLine) mixer.getLine(dataLineInfo);
           targetDataLine.open(audioFormat);
            targetDataLine.start();
           
            Thread captureThread;
            captureThread = new NewJFrame.CaptureThread();
            captureThread.start();
            DataLine.Info dataLineInfo1 = new DataLine.Info(SourceDataLine.class, audioFormat);
            sourceDataLine = (SourceDataLine) AudioSystem.getLine(dataLineInfo1);
           sourceDataLine.open(audioFormat);
            sourceDataLine.start();
            Thread playThread = new NewJFrame.PlayThread();
           playThread.start();
        }catch(Exception io)
        {
                 io.printStackTrace();
        }// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
            jTextArea1.setText("\n"+jTextArea1.getText()+"Closing Connection\n");
        try{
            closeCrap();
        }catch (Exception e)
        {
            
            e.printStackTrace();
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed
  private AudioFormat getAudioFormat()
    {
        float sampleRate = 8000.0F;
        int sampleSizeInBits = 16;
        int channels = 1;
        boolean signed = true;
        boolean bigEndian = false;
        return new AudioFormat(sampleRate, sampleSizeInBits, channels, signed, bigEndian);
    }

   
     public void closeCrap(){
         jTextArea1.setText(jTextArea1.getText()+"Closing streams\n");
     
        try
        {
            in.close();
            out.close();
        byteArrayOutputStream.close();
    }catch(Exception e)
    {
        e.printStackTrace();
    }
}

   
    
    public class PlayThread extends Thread
    {
        byte tempBuffer[] = new byte[10000];
        @Override
        public void run()
        {
            try
            {
                while (in.read(tempBuffer) != -1)
                {
                   sourceDataLine.write(tempBuffer, 0, 10000);
                }
            }
            catch (IOException e)
            {
            }
        }
    }
    
    public class CaptureThread extends Thread
    {
        byte tempBuffer[] = new byte[10000];
        @Override
        public void run()
        {
            byteArrayOutputStream = new ByteArrayOutputStream();
            stopCapture = false;
            try
            {
                while (!stopCapture)
                {
                    int cnt = targetDataLine.read(tempBuffer, 0, tempBuffer.length);
                    //returns no. of bytes read
                    out.write(tempBuffer);
                    if (cnt > 0)
                    {
                        byteArrayOutputStream.write(tempBuffer, 0, cnt);
                    }
                    out.flush();
                }
                closeCrap();
               // byteArrayOutputStream.close();
            }
            catch (Exception e)
            {
                System.out.println(e);
               // System.exit(0);
            }
        }
    
   

    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
